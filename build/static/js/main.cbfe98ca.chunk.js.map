{"version":3,"sources":["ShowTime.js","Todolist/Todoing.js","Todolist/Todoinput.js","Request.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoing","this","props","todo","map","item","idx","key","onClick","delTodo","Todoinput","handleInput","e","keyCode","addTodo","target","value","handleChange","setState","name","parseInt","state","n1","n2","onChange","onKeyDown","type","Request","data","fetch","method","body","then","res","json","result","console","log","index","album_title","author","ReactDOM","render","document","getElementById","React","createElement"],"mappings":"gQAEsCA,Y,MCAjBC,E,iLACP,IAAD,OACL,OACI,6BACI,wDACA,4BAEQC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKD,GAAMD,EAAf,OAAwB,4BAAQG,QAAS,WAAK,EAAKN,MAAMO,QAAQH,KAAzC,0B,GAP3CP,a,QCyBhBW,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKX,MAAMY,QAAQF,EAAEG,OAAOC,QATvB,EAYbC,aAAe,SAACL,GACZ,EAAKM,SAAL,eACKN,EAAEG,OAAOI,KAAOC,SAASR,EAAEG,OAAOC,UAZvC,EAAKK,MAAQ,CACTC,GAAI,EACJC,GAAI,GAJC,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOJ,KAAK,KAAKK,SAAUvB,KAAKgB,aAAcD,MAAOf,KAAKoB,MAAMC,GAAIG,UAAW,SAACb,GAAD,OAAK,EAAKD,YAAYC,IAAIc,KAAK,SADlH,IAGI,2BAAOP,KAAK,KAAKK,SAAUvB,KAAKgB,aAAcD,MAAOf,KAAKoB,MAAME,GAAIE,UAAW,SAACb,GAAD,OAAK,EAAKD,YAAYC,IAAIc,KAAK,SAC9G,2BAAIzB,KAAKoB,MAAMC,GAAGrB,KAAKoB,MAAME,IAC7B,qD,GAzBuBxB,aCzBlB4B,GCEiB5B,Y,kBDDlC,aAAc,IAAD,8BACT,+CACKsB,MAAQ,CACTO,KAAK,IAHA,E,iFAMO,IAAD,OACfC,MAAO,sDACP,CAACC,OAAO,OAAOC,KAAK,aAEnBC,MAAK,SAACC,GACH,OAAOA,EAAIC,UAEdF,MAAK,SAACC,GACH,EAAKf,SAAS,CACVU,KAAKK,EAAIE,SAEbC,QAAQC,IAAIJ,Q,+BAWhB,OACI,6BACI,wDACA,4BAEQhC,KAAKoB,MAAMO,KAAKxB,KACZ,SAACC,EAAKiC,GAAN,OACI,wBAAI/B,IAAK+B,GACL,4BAAKjC,EAAKkC,aACV,2BAAIlC,EAAKmC,kB,GAtCRzC,cEQrC0C,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SA4CzCC,IAAMC,cACZ,MACA,CAAC,GAAK,OACN,QACAD,IAAMC,cACF,KACA,CAAC,GAAK,KACN,Y","file":"static/js/main.cbfe98ca.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react';\n// 类定义组件\nexport default class ShowTime extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            time: new Date().toLocaleString()\n        }\n        // this.handleClick = this.handleClick.bind(this);\n        console.log('constructor',this.props.word);\n    }\n    componentDidMount(){\n        console.log('componentDidMount');\n        setTimeout(()=>{\n            console.log(1)\n            this.setState({\n                time: new Date().toLocaleString()\n            })\n        },1000)\n    }\n    shouldComponentUpdate(){\n        return true;\n    }\n    getSnapshotBeforeUpdate(){\n        console.log('getsnapshot');\n    }\n    componentDidUpdate(){\n        console.log('didupdate');\n    }\n    handleClick = (num,e)=>{\n        console.log(num,e);\n        console.log('点击成功');\n    }\n    divClick(num,e){\n        console.log(num,e);\n    }\n    render(){\n        console.log('render');\n        return (\n            <Fragment>\n                <div onClick={(ev)=>{this.handleClick(1,ev)}}>\n                    {this.state.time}</div>\n                <div onClick={this.divClick.bind(this,333)}>hello{this.props.word}</div>\n            </Fragment>\n        );\n    }\n}\n// 默认导出，只能导出一次\n// export default ShowTime;\n\n// 命名导出,可写多个export\n// export {ShowTime};","import React, { Component } from 'react'\n\nexport default class Todoing extends Component {\n    render() {\n        return (\n            <div>\n                <h1>正在进行</h1>\n                <ul>\n                    {\n                        this.props.todo.map((item,idx)=><li key={idx}>{item}----<button onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\n// 子组件通过props调用该函数\n\n// 受控组件和非受控组件\n\n// 非受控组件\n// 代码简单、比较适用于一次性获取表单的值\n// export default class Todoinput extends Component {\n//     componentDidMount(){\n//         console.log(this.inp.value);\n//         // console.log(this);\n//     }\n//     search = ()=>{\n//         console.log(this.inp.value);\n//     }\n//     render(){\n//         return (<div>\n//                     <input ref={inp=>this.inp = inp} type=\"text\"/>\n//                     <button onClick={this.search}>查询</button>\n//                 </div>)\n//     }\n// }\n\n\n// 受控组件：value值被react的状态控制\n// 实时获取或处理输入的内容\nexport default class Todoinput extends Component {\n    constructor(){\n        super();\n        this.state = {\n            n1: 0,\n            n2: 0\n        }\n    }\n    handleInput = (e)=>{\n        if(e.keyCode === 13){\n            this.props.addTodo(e.target.value);\n        }\n    }\n    handleChange = (e)=>{\n        this.setState({\n            [e.target.name]: parseInt(e.target.value)\n        })\n    }\n    render() {\n        return (\n            <div>\n                <input name=\"n1\" onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\n                +\n                <input name=\"n2\" onChange={this.handleChange} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\n                <p>{this.state.n1+this.state.n2}</p>\n                <button>查询</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch(('https://api.apiopen.top/musicRankingsDetails?type=1'),\r\n        {method:'post',body:'name:111'}\r\n        )\r\n        .then((res)=>{\r\n            return res.json();\r\n        })\r\n        .then((res)=>{\r\n            this.setState({\r\n                data:res.result\r\n            })\r\n            console.log(res);\r\n        })\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         console.log(res);\r\n        //         this.setState({\r\n        //             data: res.data.result\r\n        //         })\r\n        //     })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\nimport Todoing from './Todoing';\nimport Todoinput from './Todoinput';\n\nexport default class Todolist extends Component {\n    constructor(){\n        super();\n        this.state = {\n            todo: [1,2,3]\n        }\n\n        // var arr = [1,2,{a:100}];\n        // 深拷贝\n        // var b = JSON.parse(JSON.stringify(arr));\n        // b[2].a = 200;\n        // console.log(arr);\n\n        // 对象的拷贝\n        var a= {a:100,b:200};\n        // var o = Object.assign({},a);\n        // console.log(o===a);\n        // console.log(o);\n        // Object.keys返回由属性名组成的一个数组\n        Object.keys(a).forEach((item)=>{\n            console.log(item);\n            console.log(a[item]);\n        })\n        // 尽量不用for in\n        // for(var item in a){\n        //     console.log(a);\n        // }\n    }\n    addItem = (msg)=>{\n        // this.state.todo.push(msg)\n        // console.log(this.state.todo)\n        this.setState({\n            todo: [...this.state.todo,msg]\n        })\n        console.log(msg);\n    }\n    delItem = (a)=>{\n        // this.state.todo.splice(a,1); //不要写\n        // 深拷贝\\浅拷贝\n\n        var todo = [...this.state.todo];\n        todo.splice(a,1);\n        this.setState({\n            todo: todo\n        })\n    }\n    render() {\n        return (\n            <div>\n                <Todoinput addTodo={this.addItem}/>\n                <Todoing delTodo={this.delItem} todo={this.state.todo}/>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShowTime from './ShowTime';\nimport Todolist from './Todolist/Todolist'\nimport Requset from './Request';\nimport Request from './Request';\n// 组件交互\n// 父组件--->子组件：调用时在子组件上添加属性\n// 在子组件中通过props获取数据\nReactDOM.render(<Request/>,document.getElementById('root'));\n\n\n\n\n// 函数定义组件（无生命周期函数）\n// 当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n\n\n\n// react元素创建后不可改变\n// function tick(){\n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleString()}</h1>;\n//             </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'hello',\n    React.createElement(\n        'h1',\n        {'id':'h'},\n        'react'\n    )\n);\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: ['hello',{\n            type: 'h1',\n            props: {\n                id: 'h',\n                class: 'h',\n                children: ['react']\n            }\n        }]\n    }\n}\n\n// 自己声明render函数，实现页面渲染\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fr = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i] === 'object'){\n                    render(props[item][i],ele);\n                }else{\n                    var txt = document.createTextNode(props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fr.appendChild(ele);\n    container.appendChild(fr);\n}\n// render(obj,document.getElementById('root'));\n\n// 注意以下性能问题及优化方法\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\n\n// 页面回流（重排）：内容改变、大小改变、结构改变\n// 页面重绘：把字体颜色、背景颜色等样式改变\n\n// 1、node.offsetLeft、node.offsetWidth等慎用\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1\n//     root.style.width = width + 'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 2、声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// 3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n// 4、文档碎片的概念\n\n\n"],"sourceRoot":""}